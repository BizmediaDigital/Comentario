{"version":3,"file":"static/js/app.cc8119f5.chunk.js","mappings":"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","sources":["D2App/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { TableBody, TableCell, TableHead, TableRow, Table } from '@dhis2-ui/table';\nimport { Button } from '@dhis2-ui/button';\nimport './App.css';\nimport { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { toPng } from 'html-to-image';\nfunction App() {\n  const [consultaData, setConsultaData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const baseUrl = \"http://129.151.190.136:8080/api/\";\n      const queryParams = {\n        fields: '*,comments[id,text,user,visualization[id,name]]'\n      };\n      const interpretationsEndpoint = \"interpretations\";\n      const url = `${baseUrl}${interpretationsEndpoint}`;\n      try {\n        const response = await axios.get(url, {\n          params: queryParams,\n          withCredentials: true\n        });\n        if (response.status === 200) {\n          const data = response.data;\n          const interpretations = data.interpretations || [];\n          const updatedData = await Promise.all(interpretations.map(async interpretation => {\n            var _interpretation$visua;\n            const visualizationId = (_interpretation$visua = interpretation.visualization) === null || _interpretation$visua === void 0 ? void 0 : _interpretation$visua.id;\n            if (visualizationId) {\n              const visualizationUrl = `${baseUrl}visualizations/${visualizationId}`;\n              try {\n                const visualizationResponse = await axios.get(visualizationUrl, {\n                  withCredentials: true\n                });\n                if (visualizationResponse.status === 200) {\n                  interpretation.visualizationName = visualizationResponse.data.name || \"N/A\";\n                } else {\n                  console.log(`Erro na segunda consulta: ${visualizationResponse.status}`);\n                }\n              } catch (visualizationError) {\n                console.error(`Erro na segunda requisição: ${visualizationError.message}`);\n              }\n            }\n            return interpretation;\n          }));\n          setConsultaData(updatedData);\n        } else {\n          console.log(`Erro na solicitação: ${response.status}`);\n        }\n      } catch (error) {\n        console.error(`Erro na requisição: ${error.message}`);\n      }\n    };\n    fetchData();\n  }, []); // Dependências removidas já que userSettings não é mais utilizado\n\n  const downloadTable = async format => {\n    if (format === 'pdf') {\n      const doc = new jsPDF();\n      const headers = [\"Gráfico/Tabela\", \"Nome Tabela/Gráfico\", \"Usuário\", \"Comentário\"];\n      const dataRows = consultaData.map(interpretation => {\n        var _interpretation$user;\n        return [interpretation.type || \"N/A\", interpretation.visualizationName || \"N/A\", ((_interpretation$user = interpretation.user) === null || _interpretation$user === void 0 ? void 0 : _interpretation$user.displayName) || \"N/A\", interpretation.text || \"N/A\"];\n      });\n      doc.autoTable({\n        head: [headers],\n        body: dataRows\n      });\n      doc.save(\"tabela.pdf\");\n    } else if (format === 'image') {\n      const tableElement = document.querySelector('.custom-table');\n      if (tableElement) {\n        toPng(tableElement).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'table-image.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(err => {\n          console.error('Falha ao baixar a imagem:', err);\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\"\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: \"custom-table\"\n  }, /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"bold-cell\"\n  }, \"Gr\\xE1fico/Tabela\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"bold-cell\"\n  }, \"Nome Tabela/Gr\\xE1fico\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"bold-cell\"\n  }, \"Usu\\xE1rio\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"bold-cell\"\n  }, \"Coment\\xE1rio\"))), /*#__PURE__*/React.createElement(TableBody, null, consultaData.map((interpretation, index) => {\n    var _interpretation$user2;\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: index\n    }, /*#__PURE__*/React.createElement(TableCell, null, interpretation.type || \"N/A\"), /*#__PURE__*/React.createElement(TableCell, null, interpretation.visualizationName || \"N/A\"), /*#__PURE__*/React.createElement(TableCell, null, ((_interpretation$user2 = interpretation.user) === null || _interpretation$user2 === void 0 ? void 0 : _interpretation$user2.displayName) || \"N/A\"), /*#__PURE__*/React.createElement(TableCell, null, interpretation.text || \"N/A\"));\n  }))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => downloadTable('pdf'),\n    primary: true\n  }, \"Baixar como PDF\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => downloadTable('image'),\n    primary: true\n  }, \"Baixar como Imagem\"));\n}\nexport default App;"],"names":["consultaData","setConsultaData","useState","useEffect","async","baseUrl","queryParams","fields","url","response","axios","params","withCredentials","status","interpretations","data","updatedData","Promise","all","map","_interpretation$visua","visualizationId","interpretation","visualization","id","visualizationUrl","visualizationResponse","visualizationName","name","console","log","visualizationError","error","message","fetchData","downloadTable","format","doc","jsPDF","headers","dataRows","_interpretation$user","type","user","displayName","text","autoTable","head","body","save","tableElement","document","querySelector","toPng","then","dataUrl","link","createElement","download","href","click","catch","err","React","className","Table","TableHead","TableRow","TableCell","TableBody","index","_interpretation$user2","key","Button","onClick","primary"],"sourceRoot":""}